2-create_ids.py:
    input: 1-output.txt - raw Boa query output from get_comment_changes.boa. This includes the repository name, file name, commit ID,
	comment text, and change type for every source code comment change in the Boa dataset. ("Extracted" step in Table 1 in the paper).
    output: 2-id_output.txt - assigned a unique dataset ID to all rows from get_comment_changes.boa for joins + recovery later on. Data
	included in this step are the repository name, file name, commit ID, comment text, and change type for every source code comment
	change in the boa dataset.

3-preprocess.py:
    input: 2-id_output.txt (as described in 2-create_ids.py)
    output: 3-preprocessed.txt - all comment changes whose texts are less than 2 characters are removed, since they likely do not contain
	a self-admitted technical debt. The output includes: repository name, file name, commit ID, comment text, and change type. ("Length > 1"
	step in Table 1 of the paper).
    
4-prepare_cc.py:
    input: 3-preprocessed.txt (as described in 3-preprocess.py)
    output: 4-prepared_cc.txt - prepares data for classification by previous work's comment classifier by removing all data except the ID
	 and text. This output file is fed into the previous implementation whose output is renamed to "5-cc_output.txt".
    
6-keyword_search.py:
    input: 3-preprocessed.txt (as described in 3-preprocess.py)
    output: 6-keyword_output.txt - all comments which contain an SATD-indicating keyword as found by previous work. Output includes 
	repository name, file name, commit ID, comment text, and change type.
    
7-union.py:
    input: 2-id_output.txt (as described by 2-create_ids.py), 6-keyword_output.txt (as described in 6-keyword_search.py), 5-cc_output.txt 
	(comments classified as SATD by previous work)
    output: 7-union.txt - all data joined by IDs which are in either 6-keyword.txt or 5-cc_output.txt. Output includes repository name,
	file name, commit ID, comment text, and change type. ("SATD Detector / Keyword Search" in Table 1 of the paper).
    
8-regex.py:
    input: 7-union.txt (as described by 7-union.py)
    output: 8-autogen_removed_sorted.txt - comments which are likely autogenerated have been removed (e.g: "NOQA"). Output includes repository name,
	file name, commit ID, comment text, and change type. ("Removed Autogenerated" in Table 1 of the paper).
    
9-get_link.py:
    input: 8-autogen_removed_sorted.txt (as described in regex.py)
    output: 9-link_output.txt - combining comment introducing with commits that remove a comment with the same repo, file, and text.
	Output includes repository name, file name, introducing commit ID, removing commit ID, and comment text. 

10-remove_anyduplicated.py:
    input: 9-link_output.txt (as described in 10-removed_anyduplicated.py)
    output: 10-removed_duplication.txt - removing any non-unique commits (repo, file, and text are the same as another entry). Output
	includes repository name, file name, introducing commit ID, removing commit ID, and comment text. ("Removed Non-Unique Removals
	in Table 1 of the paper).
    
11-clean_dataset.py:
    input: 10-removed_duplication.txt (as described in 10-remove_anyduplicated.py)
    output: 11-cleaned.txt - reorganize the dataset column orderings for easier usage. Output includes repository name, file name, 
	introducing commit ID, removing commit ID, and comment text.
    
12-remove-sitepackages.py:
    input: 11-cleaned.txt (as described in 11-clean_dataset.py)
    output: 12-sitepackages_removed.txt - removes all comments which appeared in a "site-packages" folder. Output includes
    	repository name, file name, introducing commit ID, removing commit ID, and comment text. ("Not in "site-packages" Folder" in
	Table 1 of the paper).

13-split_tool_app.py: 
    input: 12-sitepackages_removed (as described in 12-remove-sitepackages.py)
    output: 13-apps.csv, 13-tools.csv - our dataset split on whether a repo appeared in a tool or application repository. Output includes
    	repository name, repository type, file name, introducing commit ID, removing commit ID, and comment text. (Table 2 of the paper).